{"version":3,"sources":["scripts/main.js"],"names":["IMG_URL","leftMenu","document","querySelector","hamburger","tvShowsList","modal","tvShows","tvCardImg","modalTitle","genresList","rating","description","modalLink","searchForm","searchFormInput","preloader","dropdown","querySelectorAll","tvShowsHead","posterWrapper","modalContent","pagination","loading","createElement","className","DBService","SERVER","API_KEY","url","fetch","append","res","ok","json","Error","getData","query","temp","page","id","dbService","renderCard","response","target","textContent","total_results","remove","style","cssText","results","forEach","item","backdrop","backdrop_path","title","name","poster","poster_path","vote","vote_average","posterIMG","backdropIMG","voteElem","card","idTV","innerHTML","total_pages","i","addEventListener","event","preventDefault","value","trim","getSearchResult","then","closeDropdown","classList","toggle","closest","add","getTopRated","getPopular","getWeek","getToday","display","getTvShow","posterPath","genres","voteAverage","overview","homepage","src","alt","paddingLeft","href","body","overflow","finally","crossClose","modalClose","contains","changeImage","img","dataset","getNextPage"],"mappings":"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","file":"main.9fdb98a5.js","sourceRoot":"../src","sourcesContent":["'use strict';\n/* eslint-disable */\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w185_and_h278_bestv2';\n\nconst leftMenu = document.querySelector('.left-menu');\nconst hamburger = document.querySelector('.hamburger');\nconst tvShowsList = document.querySelector('.tv-shows__list');\nconst modal = document.querySelector('.modal');\nconst tvShows = document.querySelector('.tv-shows'); // Используется для прилоудера\n\n// ! Эта секция используется для заполнения pop-up окна при нажатии на карточку\nconst tvCardImg = document.querySelector('.tv-card__img');\nconst modalTitle = document.querySelector('.modal__title');\nconst genresList = document.querySelector('.genres-list');\nconst rating = document.querySelector('.rating');\nconst description = document.querySelector('.description');\nconst modalLink = document.querySelector('.modal__link');\n\n// ! Срабатывает поиск по нажатию на Enter\nconst searchForm = document.querySelector('.search__form');\nconst searchFormInput = document.querySelector('.search__form-input');\n\nconst preloader = document.querySelector('.preloader');\nconst dropdown = document.querySelectorAll('.dropdown');\nconst tvShowsHead = document.querySelector('.tv-shows__head');\nconst posterWrapper = document.querySelector('.poster__wrapper');\nconst modalContent = document.querySelector('.modal__content');\nconst pagination = document.querySelector('.pagination');\n\n// ! Прилоудер на всю страницу ---\nconst loading = document.createElement('div'); // Создали элемент\n\nloading.className = 'loading'; // Добавили класс для прилоудера\n\n// ! Делаем запрос на сервер ---\nclass DBService {\n  constructor() {\n    this.SERVER = 'https://api.themoviedb.org/3';\n    this.API_KEY = '624e6ae26e572199a15bbde6c428ca8c';\n  }\n\n  async getData(url) {\n    tvShows.append(loading);\n\n    const res = await fetch(url);\n\n    if (res.ok) {\n      return res.json();\n    } else {\n      throw new Error(`Не удалось получить данные по адресу ${url}`);\n    }\n  }\n\n  getTestDate() {\n    return this.getData('test.json');\n  }\n\n  getTestCard() {\n    return this.getData('card.json');\n  }\n\n  getSearchResult(query) {\n    this.temp = `${this.SERVER}/search/tv?api_key=${this.API_KEY}&language=ru-RU&query=${query}`;\n\n    return this.getData(this.temp);\n  }\n\n  getNextPage(page) {\n    return this.getData(this.temp + '&page=' + page);\n  }\n\n  getTvShow(id) {\n    this.getData(`${this.SERVER}/tv/${id}?api_key=${this.API_KEY}&language=ru-RU`); // Другой стиль написания\n  }\n\n  getTopRated() {\n    this.getData(`${this.SERVER}/tv/top_rated?api_key=${this.API_KEY}&language=ru-RU`);\n  }\n\n  getPopular() {\n    this.getData(`${this.SERVER}/tv/popular?api_key=${this.API_KEY}&language=ru-RU`);\n  }\n\n  getToday() {\n    this.getData(`${this.SERVER}/tv/airing_today?api_key=${this.API_KEY}&language=ru-RU`);\n  }\n\n  getWeek() {\n    this.getData(`${this.SERVER}/tv/on_the_air?api_key=${this.API_KEY}&language=ru-RU`);\n  }\n}\n\nconst dbService = new DBService();\n\n// ! Рендерятся картинки с сервера ---\nconst renderCard = (response, target) => {\n  tvShowsList.textContent = '';\n\n  if (!response.total_results) {\n    loading.remove();\n    tvShowsHead.textContent = 'К сожалению по вашему запросу не чего не найдено ...';\n    tvShowsHead.style.cssText = 'color: red; font-size: 30px;';\n\n    return;\n  }\n\n  tvShowsHead.textContent = target ? target.textContent : 'Результат поиска';\n  tvShowsHead.style.cssText = 'color: green;';\n\n  response.results.forEach(item => {\n    const {\n      backdrop_path: backdrop,\n      name: title,\n      poster_path: poster,\n      vote_average: vote,\n      id,\n    } = item;\n\n    const posterIMG = poster ? IMG_URL + poster : 'img/no-poster.jpg';\n    const backdropIMG = backdrop ? IMG_URL + backdrop : ''; // с помощью тернарного вопроса ? задаем вопрос // в конце добавляем '' пустую строку что бы не добавлялся постер No Poster\n    const voteElem = vote ? `<span class=\"tv-card__vote\">${vote}</span>` : ''; // Если нет voteElem то не выводим span tv-card__vote // там где рейтинг 0 мы убираем логотип с рейтингом\n\n    const card = document.createElement('li');\n\n    card.idTV = id;\n    card.className = 'tv-shows__item';\n\n    card.innerHTML = `\n      <a href=\"#\" id=\"${id}\" class=\"tv-card\">\n      ${voteElem}\n      <img class=\"tv-card__img\"\n        src=\"${posterIMG}\"\n        data-backdrop=\"${backdropIMG}\"\n        alt=\"${title}\">\n      <h4 class=\"tv-card__head\">${title}</h4>\n      </a>\n    `;\n\n    loading.remove(); // Закрываем (удаляем) прилоудер\n    tvShowsList.append(card); // Загружаются новые карточки с сервера\n  });\n\n  pagination.textContent = '';\n\n  // ! Выводим список страниц в конце страницы\n  if (!target && response.total_pages > 1) {\n    for (let i = 1; i <= response.total_pages; i++) {\n      pagination.innerHTML += `<li><a href=\"#\" class=\"pages\">${i}</a></li>`;\n    }\n  }\n};\n\n// ! Работа с поисковой строкой\nsearchForm.addEventListener('submit', event => { // Submit это событие которое происходит при нажатии на кнопку Submit или при нажатии на Enter\n  event.preventDefault();\n\n  const value = searchFormInput.value.trim();\n\n  searchFormInput.value = ''; // очистка запроса\n\n  if (value) {\n    dbService.getSearchResult(value).then(renderCard);\n  }\n  searchFormInput.value = '';\n});\n\nconst closeDropdown = () => {\n  dropdown.forEach(item => {\n    item.classList.remove('active'); // закрываем все выпадающие меню при нажатии на пустое пространство за пределами окна\n  });\n};\n\n// ! Открытие меню по нажатию на Гамбургер ---\nhamburger.addEventListener('click', () => { // addEventListener - (вызов функции) отслеживает события: клик, наведение, нажатия клавиши\n  leftMenu.classList.toggle('openMenu'); // classList - обращаемся к методу он работает только с классами и точку ставить не нужно в скобках\n  hamburger.classList.toggle('open'); // toggle - добавляет если есть класс и убирает если его нету // эта строчка меняет значок гамбургера на красный крестик\n});\n\n// ! Закрытия меню когда мы щелкаем за ее пределами ---\ndocument.addEventListener('click', event => {\n  const target = event.target; // target назначаем event.target для того что бы не писать ниже event.target (хорошая практика)\n\n  if (!target.closest('.left-menu')) { // стоит ! знак отрицания что бы поменять true на false. А когда стоит !! это двойное отрицание что бы посмотреть буливое значение элемента\n    leftMenu.classList.remove('openMenu'); // Метод remove позволяет закрыть окно (убрать классы openMenu и open)\n    hamburger.classList.remove('open');\n    closeDropdown();\n  }\n});\n\n\n// ! Drop Down Menu делает выпадающие списки по нажатию в левом окне - меню (раскрывает список ul \"dropdown-list\") ---\nleftMenu.addEventListener('click', event => { // event без скобок () так как когда 1 элемент то скобки не обязательны\n  event.preventDefault();\n\n  const target = event.target;\n  const dropdown = target.closest('.dropdown'); // closest - это метод который постепенно подымается по элементам пока не найдет указанный селектор. Если не найдет то возвращает \"null\"\n\n  if (dropdown) {\n    dropdown.classList.toggle('active');\n    leftMenu.classList.add('openMenu'); // 29 и 30 строчки добавляется классы для того что бы меню открывалось по нажатию на иконки (не обязательно нажимать на гамбургер что бы открыть меню)\n    hamburger.classList.add('open');\n  }\n\n  if (target.closest('#top-rated')) {\n    dbService.getTopRated().then((response) => renderCard(response, target));\n  }\n\n  if (target.closest('#popular')) {\n    dbService.getPopular().then((response) => renderCard(response, target));\n  }\n\n  if (target.closest('#week')) {\n    dbService.getWeek().then((response) => renderCard(response, target));\n  }\n\n  if (target.closest('#today')) {\n    dbService.getToday().then((response) => renderCard(response, target));\n  }\n\n  if (target.closest('#search')) {\n    tvShowsList.textContent = '';\n    tvShowsHead.textContent = '';\n  }\n});\n\n// ! Открытие модального окна ---\ntvShowsList.addEventListener('click', event => {\n  event.preventDefault(); // Эта строчка блокирует скачек страницы к верху после нажатия на карточку так как на карточках стоит #\n\n  const target = event.target;\n  const card = target.closest('.tv-card');\n\n  if (card) {\n    preloader.style.display = 'block';\n\n    // ! Подставляются данные в карточку ---\n    dbService.getTvShow(card.id).then(({ // then метод который обрабатывает промисы\n      poster_path: posterPath,\n      name: title,\n      genres,\n      vote_average: voteAverage,\n      overview,\n      homepage,\n    }) => {\n      if (posterPath) {\n        tvCardImg.src = IMG_URL + posterPath; // Подставляем картинки\n        tvCardImg.alt = title;\n        posterWrapper.style.display = '';\n        modalContent.style.paddingLeft = '';\n      } else {\n        posterWrapper.style.display = 'none';\n        modalContent.style.paddingLeft = '25px';\n      }\n\n      modalTitle.textContent = title; // Подставляем заголовки\n      genresList.textContent = '';\n\n      genres.forEach(item => {\n        genresList.innerHTML += `<li>${item.name}</li>`;\n      });\n      rating.textContent = voteAverage;\n      description.textContent = overview;\n      modalLink.href = homepage;\n    })\n      .then(() => {\n        document.body.style.overflow = 'hidden'; // вызываем overflow: hiden; что бы скрыть скрол с права\n        modal.classList.remove('hide');\n      })\n      .finally(() => {\n        preloader.style.display = ''; // Закрытие прилоудера для модального окна\n      });\n  }\n});\n\n// ! Закрытие модального окна ---\nmodal.addEventListener('click', event => {\n  const crossClose = event.target.closest('.cross'); // Закрываем по нажатию на красный крестик\n  const modalClose = event.target.classList.contains('modal'); // Закрываем по нажатию на фон (за пределами модального окна)\n\n  if (crossClose || modalClose) {\n    document.body.style.overflow = '';\n    modal.classList.add('hide'); // Прячет модальное окно\n    loading.remove(); // Убираем прилоудер после закрытия модального окна\n  }\n});\n\n// ! Смена карточек (замена местами) ---\nconst changeImage = event => {\n  const card = event.target.closest('.tv-shows__item');\n\n  if (card) {\n    const img = card.querySelector('.tv-card__img');\n\n    if (img.dataset.backdrop) {\n      [img.src, img.dataset.backdrop] = [img.dataset.backdrop, img.src];\n    }\n  }\n};\n\ntvShowsList.addEventListener('mouseover', changeImage);\ntvShowsList.addEventListener('mouseout', changeImage);\n\npagination.addEventListener('click', event => {\n  event.preventDefault();\n\n  const target = event.target;\n\n  if (target.classList.contains('pages')) {\n    tvShows.append(loading);\n    dbService.getNextPage(target.textContent).then(renderCard);\n  }\n});\n"]}